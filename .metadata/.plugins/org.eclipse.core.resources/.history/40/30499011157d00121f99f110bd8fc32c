<!DOCTYPE html>
<html lang="en">
	<head>
		<title>Jungle</title>
		<meta charset="utf-8">
		<meta name="viewport" content="width=device-width, user-scalable=no, minimum-scale=1.0, maximum-scale=1.0">
		<style>
			body {
				background-color: #000;
				margin: 0px;
				overflow: hidden;
			}

			#info {
				position: absolute;
				top: 0px;
				width: 100%;
				color: #ffffff;
				padding: 5px;
				font-family: Monospace;
				font-size: 13px;
				text-align: center;
			}

			a {
				color: #ff0080;
				text-decoration: none;
			}

			a:hover {
				color: #0080ff;
			}

			#stats {
				position: absolute;
				top: 0;
				left: 0
			}
			#stats #fps {
				background: transparent !important
			}
			#stats #fps #fpsText {
				color: #aaa !important
			}
			#stats #fps #fpsGraph {
				display: none
			}
		</style>
	</head>
	<body>

		<div id="container"></div>

		<script src="three.js"></script>
		<script src="loading.js"></script>
		<script src="fonts/gentilis_bold.typeface.js"></script>
		<script src="fonts/gentilis_regular.typeface.js"></script>
		<script src="fonts/optimer_bold.typeface.js"></script>
		<script src="fonts/optimer_regular.typeface.js"></script>
		<script src="fonts/helvetiker_bold.typeface.js"></script>
		<script src="fonts/helvetiker_regular.typeface.js"></script>
		<script src="fonts/droid/droid_sans_regular.typeface.js"></script>
		<script src="fonts/droid/droid_sans_bold.typeface.js"></script>
		<script src="fonts/droid/droid_serif_regular.typeface.js"></script>
		<script src="fonts/droid/droid_serif_bold.typeface.js"></script>

		<script src="js/controls/TrackballControls.js"></script>

		<script src="js/Detector.js"></script>
		<script src="js/libs/stats.min.js"></script>

		<script>
			if (!Detector.webgl)
				Detector.addGetWebGLMessage();

			var camera, scene, renderer, controls, particle1, particle2, particle4, particle4, particle5, particle6, light1, light2, light3, light4, light5, light6, loading;

			var FAR = 4000;

			var clock = new THREE.Clock();

			init();
			animate();

			function init() {

				var container = document.getElementById('container');
				clock.start();

				// CAMERA

				//camera = new THREE.PerspectiveCamera(50, window.innerWidth / window.innerHeight, 1, FAR);
				camera = new THREE.OrthographicCamera( 0, window.innerWidth, window.innerHeight, 0, 0, 10000 );		
				camera.position.z = 1;
	
				//camera.position.set(0, 0, 10000);
				//camera.lookAt(new THREE.Vector3());

				// SCENE

				scene = new THREE.Scene();
				
				loading = makeLoadingNode(window.innerWidth, window.innerHeight);
				scene.add(loading);
				
				scene.fog = new THREE.Fog(0x030303, 10, FAR);
				scene.fog.color.setHSL(0.75, 0.5, 0.025);

			/**
				var objectMaterial = new THREE.MeshPhongMaterial({
					color : 0x000000,
					ambient : 0x111111,
					specular : 0xffffff,
					metal : true
				});

				// OBJECTS

				//var objectGeometry = new THREE.CubeGeometry( 0.5, 1, 1 );
				//var objectGeometry = new THREE.SphereGeometry( 1.5, 16, 8 );

				var loader = new THREE.JSONLoader();
				loader.load("obj/ship.js", function(geometry) {

					for (var i = 0; i < 30; i++) {

						var mesh = new THREE.Mesh(geometry, objectMaterial);

						mesh.position.x = Math.random() * 4000 - 2000;
						mesh.position.y = Math.random() * 4000 - 2000;
						mesh.position.z = Math.random() * 4000 - 2000;

						mesh.rotation.y = 3.14 * (0.5 - Math.random() );
						mesh.rotation.x = 3.14 * (0.5 - Math.random() );

						mesh.scale.multiplyScalar(4);

						scene.add(mesh);

						//var l = new THREE.PointLight( 0xffffff, 1, 200 );
						//scene.add( l );

					}

				});

				// LIGHTS

				scene.add(new THREE.AmbientLight(0xFFFFFF));

				var intensity = 4.5;
				var distance = 1300;
				var c1 = 0xff0040, c2 = 0x0040ff, c3 = 0x80ff80, c4 = 0xffaa00, c5 = 0x00ffaa, c6 = 0xff1100;
				//var c1 = 0xffffff, c2 = 0xffffff, c3 = 0xffffff, c4 = 0xffffff, c5 = 0xffffff, c6 = 0xffffff;

				light1 = new THREE.PointLight(c1, intensity, distance);
				scene.add(light1);

				light2 = new THREE.PointLight(c2, intensity, distance);
				scene.add(light2);

				light3 = new THREE.PointLight(c3, intensity, distance);
				scene.add(light3);

				light4 = new THREE.PointLight(c4, intensity, distance);
				scene.add(light4);

				light5 = new THREE.PointLight(c5, intensity, distance);
				scene.add(light5);

				light6 = new THREE.PointLight(c6, intensity, distance);
				scene.add(light6);

				var dlight = new THREE.DirectionalLight(0xffffff, 0.1);
				dlight.position.set(0.5, -1, 0).normalize();
				scene.add(dlight);

				var sphere = new THREE.SphereGeometry(0.25, 16, 8);

				var l1 = new THREE.Mesh(sphere, new THREE.MeshBasicMaterial({
					color : c1
				}));
				l1.position = light1.position;
				scene.add(l1);

				var l2 = new THREE.Mesh(sphere, new THREE.MeshBasicMaterial({
					color : c2
				}));
				l2.position = light2.position;
				scene.add(l2);

				var l3 = new THREE.Mesh(sphere, new THREE.MeshBasicMaterial({
					color : c3
				}));
				l3.position = light3.position;
				scene.add(l3);

				var l4 = new THREE.Mesh(sphere, new THREE.MeshBasicMaterial({
					color : c4
				}));
				l4.position = light4.position;
				scene.add(l4);

				var l5 = new THREE.Mesh(sphere, new THREE.MeshBasicMaterial({
					color : c5
				}));
				l5.position = light5.position;
				scene.add(l5);

				var l6 = new THREE.Mesh(sphere, new THREE.MeshBasicMaterial({
					color : c6
				}));
				l6.position = light6.position;
				scene.add(l6);

				particles(); */

				// RENDERER

				renderer = new THREE.WebGLRenderer({
					antialias : false,
					clearColor : 0x030303,
					clearAlpha : 1
				});
				renderer.setSize(window.innerWidth, window.innerHeight);
				renderer.setClearColor(scene.fog.color, 1);

				container.appendChild(renderer.domElement);

				renderer.gammaInput = true;
				renderer.gammaOutput = true;
				renderer.physicallyBasedShading = true;

				// STATS

				stats = new Stats();
				container.appendChild(stats.domElement);

				//

				window.addEventListener('resize', onWindowResize, false);

			}

			function particles() {

				var geometry = new THREE.Geometry();

				for ( i = 0; i < 1000; i++) {

					var vertex = new THREE.Vector3();

					vertex.x = Math.random() * 4000 - 2000;
					vertex.y = Math.random() * 4000 - 2000;
					vertex.z = Math.random() * 4000 - 2000;

					geometry.vertices.push(vertex);

				}

				var objectMaterial = new THREE.ParticleBasicMaterial({
					size : 2
				});
				objectMaterial.shading = THREE.NoShading;

				particles = new THREE.ParticleSystem(geometry, objectMaterial);
				scene.add(particles);
			}

			function onWindowResize() {

				camera.aspect = window.innerWidth / window.innerHeight;
				camera.updateProjectionMatrix();

				renderer.setSize(window.innerWidth, window.innerHeight);

				controls.handleResize();

			}

			//

			function animate() {

				requestAnimationFrame(animate);

				render();
				stats.update();

			}

			var t = 0.0;

			function render() {

				var time = Date.now() * 0.00025;
				var z = 20, d = 450;
				var passed = clock.getDelta();
				
				loading.update(passed);

/***
				if (Math.abs(camera.position.z) > 0) {
					var distance = camera.position.z / 5.0;
					var delta = passed * 10;
					distance = distance * (delta);
					camera.position.z = camera.position.z - distance;
					t += delta;

				}*/

/**
				light1.position.x = Math.sin(time * 0.7) * d;
				light1.position.z = Math.cos(time * 0.3) * d;

				light2.position.x = Math.cos(time * 0.3) * d;
				light2.position.z = Math.sin(time * 0.7) * d;

				light3.position.x = Math.sin(time * 0.7) * d;
				light3.position.z = Math.sin(time * 0.5) * d;

				light4.position.x = Math.sin(time * 0.3) * d;
				light4.position.z = Math.sin(time * 0.5) * d;

				light5.position.x = Math.cos(time * 0.3) * d;
				light5.position.z = Math.sin(time * 0.5) * d;

				light6.position.x = Math.cos(time * 0.7) * d;
				light6.position.z = Math.cos(time * 0.5) * d; */

				renderer.render(scene, camera);

			}

		</script>
	</body>
</html>
