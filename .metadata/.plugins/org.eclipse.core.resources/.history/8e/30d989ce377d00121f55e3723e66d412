function Game(container, windowWidth, windowHeight) {

	//Create the new renderer
	this.renderer = new THREE.WebGLRenderer({
		antialias : true,
		clearColor : 0x030303,
		clearAlpha : 1
	});

	var renderer = this.renderer;

	container.appendChild(renderer.domElement);

	renderer.gammaInput = true;
	renderer.gammaOutput = true;
	renderer.physicallyBasedShading = true;

	renderer.setSize(windowWidth, windowHeight);

	//Setup the scene
	this.scene = new THREE.Scene();
	var scene = this.scene;

	scene.fog = new THREE.Fog(0x030303, 10, FAR);
	scene.fog.color.setHSL(0.75, 0.5, 0.025);

	renderer.setClearColor(scene.fog.color, 1);

	//Create the camera
	this.camera = new THREE.OrthographicCamera(0, window.innerWidth, window.innerHeight, 0, 0, 10000);
	this.camera.position.z = 150;

	//Setup the clock
	this.clock = new THREE.Clock();
	this.clock.start();

	return this;
}

Game.prototype.setLoading = function() {

	//Create a loading screen
	this.loading = makeLoadingNode("Calibrating FTL...", window.innerWidth, window.innerHeight);
	this.scene.add(this.loading);

}

Game.prototype.endLoading = function() {

	//Remove the loading screen
	if (this.loading) {
		this.loading.kill();
	}

}
/**
 * Temp function to setup the game scene
 */
Game.prototype.testSetup = function() {

	console.log('Test setup called');

	this.camera = new THREE.PerspectiveCamera(50, window.innerWidth / window.innerHeight, 1, FAR);
	this.camera.position.z = 8000;

	var geometry = new THREE.Geometry();

	for ( i = 0; i < 1000; i++) {

		var vertex = new THREE.Vector3();

		vertex.x = Math.random() * 4000 - 2000;
		vertex.y = Math.random() * 4000 - 2000;
		vertex.z = Math.random() * 4000 - 2000;

		geometry.vertices.push(vertex);

	}

	var objectMaterial = new THREE.ParticleBasicMaterial({
		size : 2
	});

	objectMaterial.shading = THREE.NoShading;

	particles = new THREE.ParticleSystem(geometry, objectMaterial);
	this.scene.add(particles);

}

var t = 0.0;

Game.prototype.update = function() {
	var delta = this.clock.getDelta();

	t += delta;

	if (this.loading) {
		this.loading.update(delta);

		console.log('Loading');

		if (this.loading.isDead()) {
			this.scene.remove(this.loading);
			delete this.loading;
			this.testSetup();

			console.log('Dead');

			return;
		}

		if (t > 5) {
			this.loading.kill();
		}

	}

	if (this.tt) {
		if (Math.abs(camera.position.z) > 0) {
			var distance = camera.position.z / 5.0;
			var delta = passed * 10;
			distance = distance * (delta);
			camera.position.z = camera.position.z - distance;
			t += delta;

		}
	}

}

Game.prototype.render = function() {
	this.renderer.render(this.scene, this.camera);
}
